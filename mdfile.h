const char* mdfile="**Pattern based replace allows to perform find and replace using intuitive patterns**\n"
"\n"
"The tool allows search and replace text using patterns. It is very useful if you want to replace some macro or functions in your code with new syntax. For example:\n"
"```\n"
"cepi_callback(PenInterface, ptr, WM_LBUTTONDOWN, FW, ActivateTexPrv)\n"
"\n"
"replace to\n"
"\n"
"FW->connect(WM_LBUTTONDOWN, &PenInterface::ActivateTexPrv, ptr);\n"
"\n"
"```\n"
"in this case you may define replacement pattern\n"
"\n"
"```\n"
"cepi_callback($expression_Class,$expression_ptr,$expression_msg,$expression_w,$expression_func)\n"
"=====>\n"
"$expression_w->connect($expression_msg, &$expression_Class::$expression_func, $expression_ptr)\n"
"\n"
"```\n"
"The idea is to find text by named patterns and substitute it into the new expression. All tokens consist of  \n"
"**$name_of_token**_Your_own_id  \n"
"Your_own_id used to distinguish the token from other ones and substitute it into the correct place.  \n"
"\n"
"```\n"
"Usage:  \n"
"SmartReplacer.exe [options]  \n"
"Options list:  \n"
"  /i       Input file.  \n"
"  /o       Output file. If not specified, the file will be overwritten.  \n"
"  /p       Pattern file.  \n"
"All next options are for multiple files batch processing:  \n"
"  /r       Run recursively through files in the folder.  \n"
"  /f       Run non-recursively through files in the folder.  \n"
"  /c       Copy all changed files to this folder. By default all changed files will be copied to the folder Changed/ \n"
"  /remove  Remove everything from the folder with changes to place there only fresh results.\n"
"  /.ext    Accept all files with this extension. *.* is not acceptable, you should write extension explicitly.  \n"
"           You may provide multiple extensions.  \n"
"\n"
"List of tokens:\n"
" $string - quoted string \"...\".\n"
" $characters - regular characters - [a..z,A..Z,0..9,_,.].\n"
" $floating - floating-point value.\n"
" $numbers - any amount of numbers [0..9].\n"
" $expr - correct expression.*\n"
" $variable - correct variable name.\n"
" $block - block between brackets { ... }.\n"
" $square - block between square brackets [ ... ].\n"
" $brackets - block between round brackets ( ... ).\n"
"\n"
"***When we say \"correct expression\" we mean:  \n"
"The expression contains the same amount of vice-versa brackets ''(){}[]/**/. May contain any charactes within any sort of brackets.  \n"
"Outside the brackets scope it may contain #a..z A..Z 0..9 () [] {} +- *&~\\!:_/* and spaces.  \n"
"Comma ',' may not be outside the brackets scope, comma ends the expression.  \n"
"\n"
"Use $zero token to mark next token as optional.  \n"
"\n"
"Format of pattern file:  \n"
"\n"
"pattern_to_search_1\n"
"=====>\n"
"pattern_to_replace_1\n"
"=============================\n"
"pattern_to_search_2\n"
"=====>\n"
"pattern_to_replace_2\n"
"=============================\n"
"....\n"
"```";